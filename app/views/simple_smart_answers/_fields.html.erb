<div class="row">
  <div class="col-md-8">
    <%= f.inputs do %>
      <%= render :partial => 'shared/common_edition_attributes', :locals => {:f => f} %>
      <div class="row">
        <div class="col-md-10">
          <%= f.input :body, :as => :text, :input_html => { :rows => 5, :disabled => @resource.locked_for_edits? } %>
        </div>
      </div>
    <% end %>
  </div>
</div>

<div class="builder-container">
  <div class="row">
    <div class="col-md-8">
    <label for="edition_start_button_text" class="control-label">Start button text:</label><br>
      <% ["Start now", "Continue", "Find contact details", "Next"].each do |option| %>
        <%= f.radio_button :start_button_text, option, disabled: @resource.locked_for_edits? %>
        <%= f.label "start_button_text_#{option.gsub(" ","_").underscore}", option, class: "control-label input-md-3" %><br>
      <% end %>
      <br>
    </div>
  </div>
  <div class="nodes" id="nodes">
    <%# We need to output questions followed by outcomes but the potential for unsaved (invalid) nodes rules out the user of database ordering. So we must instead sort the collection by node order ascending (a.order <=> b.order) within node kind descending (b.kind <=> a.kind). %>
    <%= f.semantic_fields_for :nodes, @resource.nodes.sort {|a,b| [b.kind, a.order] <=> [a.kind, b.order] }, :wrapper_class => lambda {|n| return "row node #{n.kind}" } do |node| %>
      <%= render :partial => "simple_smart_answers/node", :locals => { :f => node } %>
    <% end %>
  </div>
  <div class="row">
    <div class="col-md-8">
      <%= f.link_to_add "<i class=\"glyphicon glyphicon-plus\"></i> Add question".html_safe, :nodes, :class => "btn btn-primary add-question add-right-margin", :data => { :target => "#nodes" } %>
      <%= f.link_to_add "<i class=\"glyphicon glyphicon-plus\"></i> Add outcome".html_safe, :nodes, :class => "btn btn-danger add-outcome", :data => { :target => "#nodes" } %>
    </div>
  </div>
</div>

<%= render partial: 'shared/workflow_buttons', locals: { f: f } %>

<% content_for :extra_javascript do %>
  <script>
    Publisher.smartAnswerBuilder.init();
  </script>
<% end %>
