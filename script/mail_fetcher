#!/usr/bin/env ruby

# Check all emails in the gmail inbox.
#
# Any messages successfully processed will be moved out of the inbox. Others are left
# there, so we can review that messages are getting processed properly by going into the
# gmail account and having a look.
#
require File.expand_path("../config/environment", __dir__)
Publisher::Application.mail_fetcher_config.configure

require "fact_check_email_handler"

require "redis"
require "redis-lock"

def redis
  Redis.new(RedisConfig::REDIS_CONFIG)
end

Rails.logger.info "Running MailFetcher in #{Rails.env} mode - #{Time.zone.now.utc}"

handler = FactCheckEmailHandler.new(Publisher::Application.fact_check_config)

# The lock is created and belongs to this process for as long as the `life`.
# When the block has finished executing, the lock is explicitly released.
# If an exception is raised in the block, the lock is explicitly released.
#
# If we fail to explicitly release the lock before the end of its life
# (eg network cable unplugged), it will be considered stale by other processes
# if its life has passed.
#
# We set the lock to expire after five minutes. After we process each message,
# we update it to expire at five minutes from that point. This should mean that
# we retain the lock for the duration, even if processing takes longer than
# five minutes. The exception to that is if processing a single message takes
# that long.
AUTOMATIC_LOCK_EXPIRY = (5 * 60) # seconds
begin
  Redis.new.lock("publisher:fact_check_processing_lock", life: AUTOMATIC_LOCK_EXPIRY) do |lock|
    handler.process do
      lock.extend_life(AUTOMATIC_LOCK_EXPIRY)
    end
  end
rescue Redis::Lock::LockNotAcquired => e
  Rails.logger.debug("Failed to get lock for fact check processing (#{e.message}). Another process probably got there first.")
rescue StandardError => e
  GovukError.notify(e)
  raise
end

Rails.logger.info "Finished running MailFetcher in #{Rails.env} mode - #{Time.zone.now.utc}"
